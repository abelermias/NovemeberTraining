Create a new branch called f-sql
Create a file called Sakila_Project.sql

Sakila Database

Write a SQL statement for each of the following.

1. Get 10 cities in descending alphabetical order.

	SELECT * FROM CITY ORDER BY CITY DESC LIMIT 10;

2. Get all films with "airplane" in the title.

	SELECT * FROM FILM WHERE LOWER(TITLE) LIKE '%airplane%';

3. Get the highest payment amount.

	SELECT MAX(amount) FROM PAYMENT;

4. Get the number of records in the customer table for store id #1.
	
	SELECT * FROM sakila.customer WHERE store_id = 1;

5. Get all payment records for customer with email address "NANCY.THOMAS@sakilacustomer.org"

	SELECT PAYMENT.payment_id, PAYMENT.customer_id, PAYMENT.staff_id, PAYMENT.rental_id, PAYMENT.amount, PAYMENT.payment_date, PAYMENT.last_update
 	FROM sakila.payment 
 	INNER JOIN CUSTOMER ON PAYMENT.customer_id=CUSTOMER.customer_id
 	AND CUSTOMER.email="NANCY.THOMAS@sakilacustomer.org";

6. Use a View to get the film info for actor Bob Fawcett.
	
	SELECT * FROM film_list WHERE LOWER(ACTORS) LIKE '%Bob Fawcett%';

7. Use a Stored Procedure to get the 4 inventory ids for the film "Alien Center" at Store #2.
	
	SELECT @movieName := film_id FROM FILM WHERE title = "Alien Center";
	CALL FILM_IN_STOCK(@movieName, 2, @count);

8. Insert a new store. Ensure that you use TRANSACTION. (This one is possible but it's tough! Pay attention to constraints and the order that you are inserting data.) 

	START TRANSACTION;
	SELECT @storeID := MAX(store_id)+1 FROM STORE;
	SELECT @managerID := MAX(manager_staff_id)+1 FROM STORE;
	SELECT @staffID := MAX(staff_id)+1 FROM STAFF;
	SELECT @addressID := MAX(address_id)+1 FROM ADDRESS;
	INSERT INTO STAFF(STAFF_ID, FIRST_NAME, LAST_NAME, ADDRESS_ID, EMAIL, STORE_ID, ACTIVE, USERNAME)
	VALUES(@staffID, "Abel", "Ermias", @addressID, "abelermias67@gmail.com", @storeID, 1, "Abel");
	INSERT INTO STORE(STORE_ID, MANAGER_STAFF_ID, ADDRESS_ID)
	VALUES(@storeID, @managerID, @addressID);
	UPDATE STAFF SET STORE_ID = @storeID, ACTIVE = 1 WHERE STAFF_ID = @staffID;
	COMMIT;
	
9. Update the timestamp to the current date/time for the new store you entered in the previous question. 

	UPDATE STORE SET LAST_UPDATE = NOW() WHERE STORE_ID = 3

	I haven't been able to solve number 8, this is based off assumption that it works.

10. Delete the new store. 
	
	START TRANSACTION;
	UPDATE STAFF SET STORE_ID = 3, ACTIVE = 0 WHERE STAFF_ID = 3;
	DELETE FROM STORE WHERE STORE_ID = 3
	COMMIT;
	
	I haven't been able to solve number 8, this is based off assumption that it works.

11. Using one SQL statement, get how many films are there in each rating category.

	SELECT RATING, COUNT(RATING) AS '# of FILMS' FROM FILM GROUP BY RATING;

12. Get (in order) the first and last names of the 3 customers who have spent the most, along with how much they have paid overall.
	
	SELECT FIRST_NAME, LAST_NAME, SUM(AMOUNT) AS "Total Payment" FROM PAYMENT 
	INNER JOIN CUSTOMER ON PAYMENT.customer_id=customer.customer_id
	GROUP BY PAYMENT.CUSTOMER_ID
	ORDER BY SUM(AMOUNT) DESC LIMIT 3;

13. Get all movies rented by the customer who spent the most. (Hint: This will either require nested queries, or more than two joins. one approach is much shorter than the other.)

	
	

14. Get the first and last names of all customers who spent more than $150, along with how much they spent.

	SELECT FIRST_NAME, LAST_NAME, SUM(AMOUNT) AS 'Total Spent' FROM PAYMENT 
	INNER JOIN CUSTOMER ON PAYMENT.CUSTOMER_ID=CUSTOMER.CUSTOMER_ID
	GROUP BY CUSTOMER.CUSTOMER_ID HAVING SUM(AMOUNT) > 150;

Do not hard code IDs.

https://dev.mysql.com/doc/sakila/en/sakila-introduction.html

Schema Diagram:
https://www.jooq.org/sakila#:~:text=The%20Sakila%20database%20is%20a,films%2C%20stores%2C%20and%20rentals.
